CREATE SEQUENCE SEQ_PARENT;

CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(1000) NOT NULL,
	PARENT_AGE NUMBER,
	PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
	PARENT_PHONE VARCHAR2(1000) NOT NULL UNIQUE,
	PARENT_GENDER VARCHAR2(1000) NOT NULL
);

SELECT * FROM TBL_PARENT;

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER) VALUES
(SEQ_PARENT.NEXTVAL, '한동석', '40', '경기도 남양주시', '01012341234', '남자');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER) VALUES
(SEQ_PARENT.NEXTVAL, '홍길동', '50', '서울시 강남구', '01015618888', '여자');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER) VALUES
(SEQ_PARENT.NEXTVAL, '이순신', '55', '경기도 분당', '01055556666', '여자');


/*부모 중에서 나이가 51세 이상인 부모의 이름 조회*/
SELECT PARENT_NAME, PARENT_AGE 
FROM TBL_PARENT
WHERE PARENT_AGE >= 51;

/*경기도 남양주시에 살고 있는 부모의 핸드폰 번호 조회*/
SELECT PARENT_PHONE
FROM TBL_PARENT
WHERE PARENT_ADDRESS = '경기도 남양주시';

/*AS(ALIAS): 별칭*/
SELECT PARENT_NAME AS NAME FROM TBL_PARENT;

/*CONCATENATION(연결)*/
SELECT PARENT_NAME || '님의 나이는 ' || PARENT_AGE || '살입니다.' AS INTRO 
FROM TBL_PARENT;

/*
 * 
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 '%A' : A로 끝나는 모든 값(NDFLSNJFA, 123NFJA, ...)
 'A%' : A로 시작하는 모든 값(AA, ANDKFS, AJD, ...)
 'A__' : A로 시작하며 3글자인 값(ABC, AAA, ADD, ...)
 '_A' : A로 끝나며 2글자인 값(FA, CA, DA, ...)
 '%A%' : A가 포함된 값(APPLE, BANANA, TASK, ...)
 * 
 * */
 
/*핸드폰 번호에 4가 들어간 부모님 소환*/
SELECT * FROM TBL_PARENT
WHERE PARENT_PHONE LIKE '%4%';


/*서울 사는 학부모 전체 소환*/
SELECT * FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '%서울%';

/*서울에 살지 않은 학부모 전체 소환*/
SELECT * FROM TBL_PARENT
WHERE PARENT_ADDRESS NOT LIKE '%서울%';

/*집계 함수: SELECT 절에서만 사용 가능
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */
CREATE SEQUENCE SEQ_FIELD_TRIP;

CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_TITLE VARCHAR2(1000),
	FIELD_TRIP_CONTENT VARCHAR2(1000),
	FIELD_TRIP_NUMBER NUMBER
);

INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미농장', '매미 잡자 어서와', 20);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '아이스크림 빨리 먹기 대회', '아이스크림 누가 더 잘먹나', 100);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '고구마 심기', '고구마가 왕 커요', 10);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '숭어 얼음 낚시', '숭어 잡자 추워도 참아', 80);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '커피 체험 공장', '커비 빈 객체화', 60);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '치즈 제작하기', '여기 치즈 저기 치즈 전부 다 치즈', 5);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '동물 타보기', '이리야!', 9);

SELECT ROUND(AVG(FIELD_TRIP_NUMBER), 2) FROM TBL_FIELD_TRIP;
SELECT CEIL(AVG(FIELD_TRIP_NUMBER)) FROM TBL_FIELD_TRIP;
SELECT FLOOR(AVG(FIELD_TRIP_NUMBER)) FROM TBL_FIELD_TRIP;
SELECT TRUNC(AVG(FIELD_TRIP_NUMBER)) FROM TBL_FIELD_TRIP;
SELECT COUNT(ID) FROM TBL_FIELD_TRIP;

/*
 * ORDER BY: 정렬
 * 
 * ORDER BY [컬럼명] ASC : 오름차순인데, 생략가능
 * ORDER BY [컬럼명] DESC: 내림차순, 생략불가
 * 
 * 
 * */

SELECT * FROM TBL_FIELD_TRIP
ORDER BY FIELD_TRIP_NUMBER DESC;

/*
 * GROUP BY: ~별
 * 
 * GROUP BY 컬럼명 HAVING 조건식
 * 
 * */

CREATE TABLE TBL_ORDER(
	ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(1000) NOT NULL,
	PRODUCT_PRICE NUMBER DEFAULT 0,
	MEMBER_AGE NUMBER
);

INSERT INTO TBL_ORDER
VALUES (1, '지우개', 1000, 20);
INSERT INTO TBL_ORDER
VALUES (2, '지우개', 3000, 30);
INSERT INTO TBL_ORDER
VALUES (3, '지우개', 4000, 40);
INSERT INTO TBL_ORDER
VALUES (4, '지우개', 1000, 40);
INSERT INTO TBL_ORDER
VALUES (5, '지우개', 5000, 20);
INSERT INTO TBL_ORDER
VALUES (6, '지우개', 2000, 20);
INSERT INTO TBL_ORDER
VALUES (7, '지우개', 5000, 30);
INSERT INTO TBL_ORDER
VALUES (8, '지우개', 9000, 30);
INSERT INTO TBL_ORDER
VALUES (9, '지우개', 2000, 50);
INSERT INTO TBL_ORDER
VALUES (10, '지우개', 1000, 10);

SELECT MEMBER_AGE, COUNT(PRODUCT_NAME) FROM TBL_ORDER
GROUP BY MEMBER_AGE
HAVING COUNT(PRODUCT_NAME) >= 2;

/*연령대 별로 평균 구매 가격 조회*/
SELECT MEMBER_AGE, AVG(PRODUCT_PRICE) "AVG" FROM TBL_ORDER
GROUP BY MEMBER_AGE
ORDER BY "AVG" DESC;

/*
 * NULL 검사
 * 
 * IS NULL : NULL이면 TRUE
 * IS NOT NULL : NULL이 아니면 TRUE
 * 
 * */

SELECT MEMBER_AGE, AVG(PRODUCT_PRICE) "AVG" FROM TBL_ORDER
WHERE PRODUCT_PRICE IS NOT NULL
GROUP BY MEMBER_AGE
HAVING AVG(PRODUCT_PRICE) > 2000;

/*
 * 서브 쿼리(SUB QUERY)
 * 
 * FROM절 : IN LINE VIEW
 * SELECT절 : SCALAR
 * WHERE절 : SUB QUERY
 * 
 * */


/*20대 중 구매 가격이 2000원이 넘는 주문 번호*/
SELECT ID
FROM
(
	SELECT * FROM TBL_ORDER
	WHERE MEMBER_AGE = 20
)
WHERE PRODUCT_PRICE > 2000;

/*상품 가격이 2000원이 넘는 상품의 나이대 조회 후 결과로 ID 조회*/

/*MEMBER_AGE IN (30, 40, 20)*/
/*MEMBER_AGE = 30 OR MEMBER_AGE = 40 OR MEMBER_AGE = 20*/

SELECT ID FROM TBL_ORDER
WHERE MEMBER_AGE IN 
(
	SELECT MEMBER_AGE FROM TBL_ORDER
	WHERE PRODUCT_PRICE > 2000
);

SELECT O.*, (SELECT AVG(PRODUCT_PRICE) FROM TBL_ORDER) FROM TBL_ORDER O;

/*
 * SQL 실행 순서
 * 
 * FROM > JOIN > ON > WHERE > GROUP BY > HAVING > SELECT > ORDER BY
 * 
 * */

CREATE SEQUENCE SEQ_USER;

CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_ID VARCHAR2(1000) UNIQUE NOT NULL,
	USER_PW VARCHAR2(1000) NOT NULL,
	USER_ADDRESS VARCHAR2(1000),
	USER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
	USER_BIRTH DATE
);

CREATE SEQUENCE SEQ_POST;

CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(1000) NOT NULL,
	POST_CONTENT VARCHAR2(1000) NOT NULL,
	POST_CREATED_DATE DATE DEFAULT CURRENT_TIMESTAMP,
	USER_ID NUMBER,
	CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

CREATE SEQUENCE SEQ_REPLY;

CREATE TABLE TBL_REPLY(
	ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
	REPLY_CONTENT VARCHAR2(1000) NOT NULL,
	USER_ID NUMBER,
	POST_ID NUMBER,
	CONSTRAINT FK_REPLY_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);


INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'hds1234', '1234', '서울시 강남구', 'tedhan1204@gmail.com', '2000-12-04');
INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'lss9999', '9999', '경기도 남양주시', 'lss1234@gmail.com', '1999-01-04');

SELECT * FROM TBL_USER;

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT, USER_ID)
VALUES(SEQ_POST.NEXTVAL, '테스트 제목1', '테스트 내용1', 1);
INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT, USER_ID)
VALUES(SEQ_POST.NEXTVAL, '테스트 제목2', '테스트 내용2', 1);
INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT, USER_ID)
VALUES(SEQ_POST.NEXTVAL, '테스트 제목3', '테스트 내용3', 2);

SELECT * FROM TBL_POST;

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '댓글 테스트1', 1, 4);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '댓글 테스트2', 2, 1);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '댓글 테스트3', 2, 2);
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '댓글 테스트4', 1, 2);

SELECT * FROM TBL_REPLY;

SELECT REPLY_CONTENT, U.USER_ID FROM TBL_REPLY R
INNER JOIN TBL_USER U
ON R.USER_ID = U.ID;

SELECT P.*, U.USER_ID FROM TBL_POST P
JOIN TBL_USER U
ON P.USER_ID = U.ID;

/*댓글 작성자 중 게시글을 등록한 회원 조회*/
SELECT P.*, U.USER_ID FROM
(
	SELECT * 
	FROM TBL_POST
	WHERE USER_ID IN
	(
		SELECT U.ID FROM TBL_REPLY R
		JOIN TBL_USER U
		ON R.USER_ID = U.ID
	)
)P JOIN TBL_USER U
ON P.USER_ID = U.ID;


SELECT * FROM TBL_USER;
SELECT * FROM TBL_POST;
SELECT * FROM TBL_REPLY;

/*게시글 전체 정보와 작성자 아이디 조회*/
SELECT P.*, U.USER_ID FROM TBL_POST P
INNER JOIN TBL_USER U
ON P.USER_ID = U.ID;

/*댓글 조회와 작성자 정보 모두 조회*/
SELECT R.REPLY_CONTENT, U.* FROM TBL_REPLY R
INNER JOIN TBL_USER U
ON R.USER_ID = U.ID;

UPDATE TBL_REPLY
SET REPLY_CONTENT = '댓글 안녕!'
WHERE ID = 27;

/*댓글 내용 중 "안녕"이 포함된 댓글의 게시글 제목과 내용 조회*/
SELECT P.POST_TITLE, P.POST_CONTENT FROM TBL_REPLY R
INNER JOIN TBL_POST P
ON R.REPLY_CONTENT LIKE '%안녕%' AND R.POST_ID = P.ID;

/*게시글 별 댓글 수가 가장 많은 게시글 정보와 작성자 정보 조회*/
SELECT * FROM TBL_POST
WHERE ID = 
(
   SELECT POST_ID
   FROM TBL_REPLY
   GROUP BY POST_ID
   HAVING COUNT(ID) IN
   (
      SELECT MAX(REPLY_COUNT) FROM
      (
         SELECT COUNT(ID) REPLY_COUNT 
         FROM TBL_REPLY
         GROUP BY POST_ID
      )
   )
);



SELECT ROWNUM, P.* FROM TBL_POST P;

SELECT POST_TITLE, POST_CONTENT FROM TBL_POST P
INNER JOIN
(
   SELECT R.* FROM 
   (
      SELECT POST_ID, COUNT(ID) REPLY_COUNT 
      FROM TBL_REPLY
      GROUP BY POST_ID
      ORDER BY REPLY_COUNT DESC
   ) R
   WHERE ROWNUM = 1
) R
ON P.ID = R.POST_ID;

